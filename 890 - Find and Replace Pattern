ou have a list of words and a pattern, and you want to know which words in words matches the pattern.

A word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p(x), we get the desired word.

(Recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.)

Return a list of the words in words that match the given pattern. 

You may return the answer in any order.

 

Example 1:

Input: words = ["abc","deq","mee","aqq","dkd","ccc"], pattern = "abb"
Output: ["mee","aqq"]
Explanation: "mee" matches the pattern because there is a permutation {a -> m, b -> e, ...}. 
"ccc" does not match the pattern because {a -> c, b -> c, ...} is not a permutation,
since a and b map to the same letter.


class Solution {
    public List<String> findAndReplacePattern(String[] words, String pattern) {
        char[] temp = pattern.toCharArray();
        int[] resultChar = new int[temp.length];
        for (int i = 0; i < temp.length;i++)
        {
            resultChar[i] = i ;
            for (int k = 0; k < i; k++ )
            {
                if (temp[i] == temp[k])
                    resultChar[i] = k;
            }
        }
        List<String> result = new ArrayList<String>();
        for (int i = 0; i < words.length; i++)
        {
            char[] tempChar = words[i].toCharArray();
            int[] temp2 = new int[tempChar.length];
            for (int j = 0; j < tempChar.length;j++)
            {
                temp2[j] = j ;
                for (int k = 0; k < j; k++ )
                {
                    if (tempChar[j] == tempChar[k])
                        temp2[j] = k;
                }                

            }
            if (Arrays.equals(temp2,resultChar))
                result.add(String.valueOf(tempChar));
        }
        return result;
    }
}
