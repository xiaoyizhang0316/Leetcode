A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.

Return a deep copy of the list.

The Linked List is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:

val: an integer representing Node.val
random_index: the index of the node (range from 0 to n-1) where random pointer points to, or null if it does not point to any node.

-----------------Solution-----------------
/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
    public Node copyRandomList(Node head) {
        if (head == null)
        {
            return null;
        }
        Node newHeadNode = new Node(head.val);
        Node oldHead = head;
        Node oldCurrent = head;
        Node newCurrent = newHeadNode;
        ArrayList<Node> oldNodeList = new ArrayList<Node>();
        ArrayList<Node> newNodeList = new ArrayList<Node>();
        oldNodeList.add(head);
        newNodeList.add(newHeadNode);
        while(oldCurrent.next != null)
        {

            Node tempHeadNode = new Node(oldCurrent.next.val);
            newCurrent.next = tempHeadNode;
            oldCurrent = oldCurrent.next;
            newCurrent = newCurrent.next;
            newNodeList.add(tempHeadNode);
            oldNodeList.add(oldCurrent);
        }
        for(int i = 0;i < oldNodeList.size();i++)
        {
            if (oldNodeList.get(i).random == null)
            {
                newNodeList.get(i).random = null;
            }
            else
            {
                newNodeList.get(i).random = newNodeList.get(oldNodeList.indexOf(oldNodeList.get(i).random));
            }
        }
        return newHeadNode;
    }
}
