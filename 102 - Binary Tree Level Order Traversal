Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]


-----------------Solution----------------

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    Dictionary<int, IList<int>> result = new Dictionary<int, IList<int>>();

    public IList<IList<int>> LevelOrder(TreeNode root)
    {
        if (root == null)
            return new List<IList<int>>();;
        
        int index = 0;
        Travers(root, 0);
        IList<IList<int>> ans = new List<IList<int>>();
        foreach (var item in result)
        {
            ans.Add(item.Value);
        }
        return ans;
    }

    public void Travers(TreeNode root, int index)
    {
        if (root == null)
            return;
        if (result.ContainsKey(index))
        {
            result[index].Add(root.val);
        }
        else
        {
            IList<int> temp = new List<int>();
            temp.Add(root.val);
            result.Add(index, temp);
        }
        Travers(root.left, index + 1);
        Travers(root.right, index + 1);
    }
}
