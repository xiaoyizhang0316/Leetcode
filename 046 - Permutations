Given a collection of distinct integers, return all possible permutations.

Example:

Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]

class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> lists = new ArrayList<List<Integer>>();
        List<Integer> list = new ArrayList<Integer>();

        // edge case: empty array
        if (nums.length == 0) return lists;

        // insert initial case when there is only 1 number
        list.add(nums[0]);
        lists.add(list);

        // for the rest of the array, solution for i involves
        // retrieving the solution of i - 1, then for each list
        // in the solution, insert the new number into every
        // possible position in that list to create the new list,
        // then insert that new list to the end of the solution.
        for (int i = 1; i < nums.length; i++) {
            int num = nums[i];
            int nList = lists.size();
            for (int iList = 0; iList < nList; iList++) {
                List<Integer> l = lists.get(iList);
                for (int pos = 0; pos <= l.size(); pos++) {
                    List<Integer> L = new ArrayList<Integer>(l);
                    L.add(pos, num);
                    lists.add(L);
                }
            }
            // after inserting all the new lists, remove the lists
            // of the previous solution (solution for i - 1).
            for (; nList > 0; nList--)
                lists.remove(0);
        }

        // return the final solution.
        return lists;
    }
}
