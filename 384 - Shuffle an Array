Shuffle a set of numbers without duplicates.

Example:

// Init an array with set 1, 2, and 3.
int[] nums = {1,2,3};
Solution solution = new Solution(nums);

// Shuffle the array [1,2,3] and return its result. Any permutation of [1,2,3] must equally likely to be returned.
solution.shuffle();

// Resets the array back to its original configuration [1,2,3].
solution.reset();

// Returns the random shuffling of array [1,2,3].
solution.shuffle();


----------------------Solution------------------

public class Solution
{

    private List<int> numberList = new List<int>();
    Random random;

    public Solution(int[] nums)
    {
        foreach (int i in nums)
        {
            numberList.Add(i);
        }
        random = new Random();
    }

    /** Resets the array to its original configuration and return it. */
    public int[] Reset()
    {
        return numberList.ToArray();
    }

    /** Returns a random shuffling of the array. */
    public int[] Shuffle()
    {
        List<int> result = new List<int>();
        List<int> indexList = new List<int>();
        for (int i = 0; i < numberList.Count; i++)
        {
            indexList.Add(i);
        }
        for (int i = 0; i < numberList.Count; i++)
        {
            int index = random.Next(indexList.Count);
            result.Add(numberList[indexList[index]]);
            indexList.Remove(indexList[index]);
        }
        return result.ToArray();
    }
}
/**
 * Your Solution object will be instantiated and called as such:
 * Solution obj = new Solution(nums);
 * int[] param_1 = obj.Reset();
 * int[] param_2 = obj.Shuffle();
 */
