Return the root node of a binary search tree that matches the given preorder traversal.

(Recall that a binary search tree is a binary tree where for every node, any descendant of node.left has a value < node.val, and any descendant of node.right has a value > node.val.  Also recall that a preorder traversal displays the value of the node first, then traverses node.left, then traverses node.right.)

 

Example 1:

Input: [8,5,1,7,10,12]
Output: [8,5,10,1,7,null,12]


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode bstFromPreorder(int[] preorder) {
        if (preorder.length == 0)
            return null;
        if (preorder.length == 1)
            return new TreeNode(preorder[0]);
        int max = 0;
        for (int i = 1; i < preorder.length; i++)
        {
            if (preorder[i] > preorder[max])
            {
                max = i;
                break;
            }

        }
        TreeNode result = new TreeNode(preorder[0]);
        if(max == 0)
        {
            int[] temp2 = Arrays.copyOfRange(preorder,1,preorder.length); 
            result.left = bstFromPreorder(temp2);
        }
        else
        {
            int[] temp1 = Arrays.copyOfRange(preorder,1,max);
            int[] temp2 = Arrays.copyOfRange(preorder,max,preorder.length);
            result.left = bstFromPreorder(temp1);
            result.right = bstFromPreorder(temp2);   
        }

        return result;
    }
}
